require('dotenv').config(); // Load environment variables from .env file
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const fs = require('fs'); // Required for checking/creating directories

// Import routes
const authRoutes = require('./routes/auth');
const explainRoutes = require('./routes/explain');
const historyRoutes = require('./routes/history');

const app = express();
const PORT = process.env.PORT || 5000;

// Ensure public/audio directory exists for TTS output
const audioPublicDir = path.join(__dirname, 'public/audio');
if (!fs.existsSync(audioPublicDir)) {
  fs.mkdirSync(audioPublicDir, { recursive: true });
}

// Middleware
app.use(cors()); // Enable CORS for all origins (adjust for production)
app.use(express.json()); // Parse JSON request bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded request bodies

// Serve static files (for audio files generated by TTS)
app.use('/audio', express.static(path.join(__dirname, 'public/audio')));

// Database Connection
mongoose.connect(process.env.MONGO_URI, {
  serverSelectionTimeoutMS: 5000,
  socketTimeoutMS: 45000,
  maxPoolSize: 10,
  minPoolSize: 2,
  retryWrites: true,
})
  .then(() => {
    console.log('✅ MongoDB connected successfully');
  })
  .catch(err => {
    console.error('❌ MongoDB connection error:', err.message);
    console.error('MONGO_URI:', process.env.MONGO_URI ? 'Set ✅' : 'Not set ❌');
    process.exit(1); // Exit if DB connection fails
  });

// MongoDB connection event listeners
mongoose.connection.on('connected', () => {
  console.log('✅ Mongoose connected to MongoDB');
});

mongoose.connection.on('disconnected', () => {
  console.warn('⚠️  Mongoose disconnected from MongoDB');
});

mongoose.connection.on('error', (err) => {
  console.error('❌ MongoDB connection error:', err);
});

// API Routes
app.use('/api/auth', authRoutes);
app.use('/api/explain', explainRoutes);
app.use('/api/history', historyRoutes);

// Basic health check route
app.get('/', (req, res) => {
  res.send('RunThru Backend API is running!');
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke on the server!');
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

